2025-01-09 01:51:23,130{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 710a953caddacfbb9585e2592c56a4daf760130d (plus uncommitted changes)
2025-01-09 01:51:23,131{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin ./target/debug/maelstrom_distributed -- node-count 1 --time-limit 10
2025-01-09 01:51:23,193{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args ["node-count" "1" "--time-limit" "10"]
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16142
         "0x5827908c"
         "maelstrom.db$db$reify__16142@5827908c"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x732ffb6a" "2025-01-09T01:51:23.108Z"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x5ed83e36"
         "maelstrom.net$jepsen_net$reify__15251@5ed83e36"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x2459715c"
         "maelstrom.workload.echo$client$reify__16863@2459715c"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x401e36ab"
         "java.util.concurrent.CyclicBarrier@401e36ab"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x4ce66169"
         "jepsen.checker$compose$reify__11881@4ce66169"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "./target/debug/maelstrom_distributed"
  "--"
  "node-count"
  "1"
  "--time-limit"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@53d0cf4d"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@3c6c87fa"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "./target/debug/maelstrom_distributed"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 60000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x77198cce"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@77198cce"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0xe7b7395"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@e7b7395"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x383c94ed"
                                                    "maelstrom.workload.echo$workload$fn__16882@383c94ed"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x293ccbdd"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x12f85dc8"
         "maelstrom.net$jepsen_os$reify__15254@12f85dc8"]
 :time-limit 60
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-01-09 01:51:25,428{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2025-01-09 01:51:25,431{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-01-09 01:51:25,436{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-01-09 01:51:25,437{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2025-01-09 01:51:25,438{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2025-01-09 01:51:25,438{GMT}	INFO	[jepsen node n2] maelstrom.process: launching ./target/debug/maelstrom_distributed ["node-count" "1" "--time-limit" "10"]
2025-01-09 01:51:25,438{GMT}	INFO	[jepsen node n4] maelstrom.process: launching ./target/debug/maelstrom_distributed ["node-count" "1" "--time-limit" "10"]
2025-01-09 01:51:25,438{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2025-01-09 01:51:25,438{GMT}	INFO	[jepsen node n3] maelstrom.process: launching ./target/debug/maelstrom_distributed ["node-count" "1" "--time-limit" "10"]
2025-01-09 01:51:25,439{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2025-01-09 01:51:25,439{GMT}	INFO	[jepsen node n5] maelstrom.process: launching ./target/debug/maelstrom_distributed ["node-count" "1" "--time-limit" "10"]
2025-01-09 01:51:25,441{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-01-09 01:51:25,445{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-01-09 01:51:25,446{GMT}	INFO	[jepsen node n1] maelstrom.process: launching ./target/debug/maelstrom_distributed ["node-count" "1" "--time-limit" "10"]
2025-01-09 01:51:35,464{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-01-09 01:51:35,464{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2025-01-09 01:51:35,467{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2025-01-09 01:51:35,468{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2025-01-09 01:51:35,469{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2025-01-09 01:51:37,464{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2025-01-09 01:51:37,466{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Expected node n3 to respond to an init message, but node did not respond.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.db$db$reify__16142.setup_BANG_(db.clj:63)
	at jepsen.db$fn__8729$G__8723__8733.invoke(db.clj:12)
	at jepsen.db$fn__8729$G__8722__8738.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.db$db$reify__16142.setup_BANG_(db.clj:48)
	... 27 common frames omitted
